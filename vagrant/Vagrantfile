# -*- mode: ruby -*-
# vi: set ft=ruby :

# Require YAML module
require 'yaml'

# server configuration
vm_ip_address = "192.168.60.25"
vm_naked_hostname = "lucee.dev"
vm_name = "Lucee-CFML"
vm_max_memory = 1024
vm_num_cpus = 2
vm_max_host_cpu_cap = "100"

# synced folder configuration
synced_webroot_local = "../www"
synced_webroot_box = "/var/wwwDefault/"
synced_webroot_id = "wwwDefault"
synced_webroot_owner = "vagrant"
synced_webroot_group = "vagrant"

synced_parent_local = "../../"
synced_parent_box = "/vagrant-parent"
synced_parent_id = "vagrant-parent"
synced_parent_owner = "vagrant"
synced_parent_group = "vagrant"

Vagrant.configure("2") do |config|
	config.vm.box = "centos-7-x64"
	config.vm.box_url = "https://github.com/holms/vagrant-centos7-box/releases/download/7.1.1503.001/CentOS-7.1.1503-x86_64-netboot.box"
	config.vm.boot_timeout = 180

	config.vm.provider "virtualbox" do |v|
		# set name of vm
		v.name = vm_name
		# no matter how much cpu is used in vm, use no more than vm_max_host_cpu_cap amount
		v.customize ["modifyvm", :id, "--cpuexecutioncap", vm_max_host_cpu_cap]
		# set max amount of host machine ram allotted for vm to use
		v.customize ["modifyvm", :id, "--memory", vm_max_memory]
		# set number of cpus from host machine that vm is allowed to use
		v.customize ["modifyvm", :id, "--cpus", vm_num_cpus]
		# the next two settings enable using the host computer's dns inside the vagrant box
		# enable dns proxy in nat mode
		v.customize ["modifyvm", :id, "--natdnshostresolver1", "on"]
		# use the host's resolver as a dns proxy in nat mode
		v.customize ["modifyvm", :id, "--natdnsproxy1", "on"]
	end

	# set vm ip address and add auto_correct on forwarded port so it doesn't collide with other vagrant boxes
	config.vm.network :private_network, ip: vm_ip_address
	# config.vm.network :forwarded_port, guest: 22, host: 2223, auto_correct: true

	# An array of hosts that need configured on the host machine to access the VM
	hosts = []
	# Look for other sites checked out in the same directory as this repo that have a "VagrantConfig.yaml" in their root.
	siteConfigs = Dir["../../*/VagrantConfig/*.yaml"]
	
	siteConfigs.each do |config|
		if File.read(config).length > 0
			thisConfig = YAML.load_file( config )
			puts "Found '#{thisConfig["name"]}' in #{config.sub! '../../', ''}"
			hosts.concat thisConfig["hosts"]
		else
			puts "Found '#{config}' but it was empty!"		
		end
	end

	if Vagrant.has_plugin?("vagrant-hostsupdater")
		# set vm hostname
		config.vm.hostname = vm_naked_hostname
		config.hostsupdater.aliases = hosts
	end
	
	# Init log file
	config.vm.provision :shell, :path => "provisioners/setup-log.sh", :privileged => true

	# set vm timezone and do some cleanup before installations
	config.vm.provision :shell, :path => "provisioners/set-vm-timezone.sh", :privileged => true

	# install miscellaneous utilities
	config.vm.provision :shell, :path => "provisioners/install-utilities.sh", :privileged => true

	# install/configure nginx
	config.vm.provision :shell, :path => "provisioners/install-nginx.sh", :privileged => true

	# install/configure Oracle JDK
	config.vm.provision :shell, :path => "provisioners/install-jdk.sh", :privileged => true

	# install/configure CommandBox
	config.vm.provision :shell, :path => "provisioners/install-commandbox.sh", :privileged => true

	# install/configure lucee
	config.vm.provision :shell, :path => "provisioners/install-lucee.sh", :privileged => true, :args => [
		vm_name, vm_naked_hostname, vm_ip_address
	]

	# Configure dynamic sites.  The arg we pass in is the local path on the host to the parend directory that holds the repos.
	# It is used to generate better messaging to the user.
	config.vm.provision :shell, :path => "provisioners/configure-sites.sh", :privileged => true, :args => [ File.expand_path('../../../', __FILE__) ]
		
	# install/configure FakeSMTP
	config.vm.provision :shell, :path => "provisioners/install-fakesmtp.sh", :privileged => true

	# confirm setup is complete and output connection info
	config.vm.provision :shell, :path => "provisioners/final-output.sh", :privileged => true, :args => [
		vm_name, vm_naked_hostname, vm_ip_address
	]

	# add synced folders
	config.vm.synced_folder synced_webroot_local, synced_webroot_box, :id => synced_webroot_id, :owner => synced_webroot_owner, :group => synced_webroot_group
	config.vm.synced_folder synced_parent_local, synced_parent_box, :id => synced_parent_id, :owner => synced_parent_owner, :group => synced_parent_group

end
